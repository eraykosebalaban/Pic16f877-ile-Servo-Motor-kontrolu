CCS PCM C Compiler, Version 5.049, 5967               01-May-22 23:20

               Filename:   C:\Users\Eray\Desktop\Pic168f77 Projeleri\Pic16f877 ile Servo Motor kontrolü\Pic16f877 ile Servo Motor Kontrolu.lst

               ROM used:   874 words (11%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           26 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2F8
0003:  NOP
.................... #include<16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 8C,20
0005:  DATA E3,34
0006:  DATA A0,1E
0007:  DATA A0,12
0008:  DATA 75,10
0009:  DATA C4,32
000A:  DATA F2,32
000B:  DATA E3,32
000C:  DATA 00,00
*
00B2:  MOVLW  8E
00B3:  MOVWF  77
00B4:  MOVF   27,W
00B5:  MOVWF  78
00B6:  MOVF   26,W
00B7:  MOVWF  79
00B8:  CLRF   7A
00B9:  MOVF   78,F
00BA:  BTFSS  03.2
00BB:  GOTO   0C6
00BC:  MOVF   79,W
00BD:  MOVWF  78
00BE:  CLRF   79
00BF:  MOVLW  08
00C0:  SUBWF  77,F
00C1:  MOVF   78,F
00C2:  BTFSS  03.2
00C3:  GOTO   0C6
00C4:  CLRF   77
00C5:  GOTO   0CE
00C6:  BCF    03.0
00C7:  BTFSC  78.7
00C8:  GOTO   0CD
00C9:  RLF    79,F
00CA:  RLF    78,F
00CB:  DECF   77,F
00CC:  GOTO   0C6
00CD:  BCF    78.7
00CE:  BCF    0A.3
00CF:  BCF    0A.4
00D0:  GOTO   340 (RETURN)
00D1:  MOVF   26,W
00D2:  BTFSC  03.2
00D3:  GOTO   196
00D4:  MOVWF  32
00D5:  MOVF   2A,W
00D6:  BTFSC  03.2
00D7:  GOTO   196
00D8:  SUBWF  32,F
00D9:  BTFSS  03.0
00DA:  GOTO   0E0
00DB:  MOVLW  7F
00DC:  ADDWF  32,F
00DD:  BTFSC  03.0
00DE:  GOTO   196
00DF:  GOTO   0E6
00E0:  MOVLW  81
00E1:  SUBWF  32,F
00E2:  BTFSS  03.0
00E3:  GOTO   196
00E4:  BTFSC  03.2
00E5:  GOTO   196
00E6:  MOVF   32,W
00E7:  MOVWF  77
00E8:  CLRF   78
00E9:  CLRF   79
00EA:  CLRF   7A
00EB:  CLRF   31
00EC:  MOVF   27,W
00ED:  MOVWF  30
00EE:  BSF    30.7
00EF:  MOVF   28,W
00F0:  MOVWF  2F
00F1:  MOVF   29,W
00F2:  MOVWF  2E
00F3:  MOVLW  19
00F4:  MOVWF  32
00F5:  MOVF   2D,W
00F6:  SUBWF  2E,F
00F7:  BTFSC  03.0
00F8:  GOTO   109
00F9:  MOVLW  01
00FA:  SUBWF  2F,F
00FB:  BTFSC  03.0
00FC:  GOTO   109
00FD:  SUBWF  30,F
00FE:  BTFSC  03.0
00FF:  GOTO   109
0100:  SUBWF  31,F
0101:  BTFSC  03.0
0102:  GOTO   109
0103:  INCF   31,F
0104:  INCF   30,F
0105:  INCF   2F,F
0106:  MOVF   2D,W
0107:  ADDWF  2E,F
0108:  GOTO   13B
0109:  MOVF   2C,W
010A:  SUBWF  2F,F
010B:  BTFSC  03.0
010C:  GOTO   124
010D:  MOVLW  01
010E:  SUBWF  30,F
010F:  BTFSC  03.0
0110:  GOTO   124
0111:  SUBWF  31,F
0112:  BTFSC  03.0
0113:  GOTO   124
0114:  INCF   31,F
0115:  INCF   30,F
0116:  MOVF   2C,W
0117:  ADDWF  2F,F
0118:  MOVF   2D,W
0119:  ADDWF  2E,F
011A:  BTFSS  03.0
011B:  GOTO   13B
011C:  INCF   2F,F
011D:  BTFSS  03.2
011E:  GOTO   13B
011F:  INCF   30,F
0120:  BTFSS  03.2
0121:  GOTO   13B
0122:  INCF   31,F
0123:  GOTO   13B
0124:  MOVF   2B,W
0125:  IORLW  80
0126:  SUBWF  30,F
0127:  BTFSC  03.0
0128:  GOTO   13A
0129:  MOVLW  01
012A:  SUBWF  31,F
012B:  BTFSC  03.0
012C:  GOTO   13A
012D:  INCF   31,F
012E:  MOVF   2B,W
012F:  IORLW  80
0130:  ADDWF  30,F
0131:  MOVF   2C,W
0132:  ADDWF  2F,F
0133:  BTFSS  03.0
0134:  GOTO   118
0135:  INCF   30,F
0136:  BTFSS  03.2
0137:  GOTO   118
0138:  INCF   31,F
0139:  GOTO   118
013A:  BSF    7A.0
013B:  DECFSZ 32,F
013C:  GOTO   13E
013D:  GOTO   149
013E:  BCF    03.0
013F:  RLF    2E,F
0140:  RLF    2F,F
0141:  RLF    30,F
0142:  RLF    31,F
0143:  BCF    03.0
0144:  RLF    7A,F
0145:  RLF    79,F
0146:  RLF    78,F
0147:  RLF    33,F
0148:  GOTO   0F5
0149:  BTFSS  33.0
014A:  GOTO   151
014B:  BCF    03.0
014C:  RRF    78,F
014D:  RRF    79,F
014E:  RRF    7A,F
014F:  RRF    33,F
0150:  GOTO   154
0151:  DECF   77,F
0152:  BTFSC  03.2
0153:  GOTO   196
0154:  BTFSC  33.7
0155:  GOTO   17D
0156:  BCF    03.0
0157:  RLF    2E,F
0158:  RLF    2F,F
0159:  RLF    30,F
015A:  RLF    31,F
015B:  MOVF   2D,W
015C:  SUBWF  2E,F
015D:  BTFSC  03.0
015E:  GOTO   169
015F:  MOVLW  01
0160:  SUBWF  2F,F
0161:  BTFSC  03.0
0162:  GOTO   169
0163:  SUBWF  30,F
0164:  BTFSC  03.0
0165:  GOTO   169
0166:  SUBWF  31,F
0167:  BTFSS  03.0
0168:  GOTO   18C
0169:  MOVF   2C,W
016A:  SUBWF  2F,F
016B:  BTFSC  03.0
016C:  GOTO   174
016D:  MOVLW  01
016E:  SUBWF  30,F
016F:  BTFSC  03.0
0170:  GOTO   174
0171:  SUBWF  31,F
0172:  BTFSS  03.0
0173:  GOTO   18C
0174:  MOVF   2B,W
0175:  IORLW  80
0176:  SUBWF  30,F
0177:  BTFSC  03.0
0178:  GOTO   17D
0179:  MOVLW  01
017A:  SUBWF  31,F
017B:  BTFSS  03.0
017C:  GOTO   18C
017D:  INCF   7A,F
017E:  BTFSS  03.2
017F:  GOTO   18C
0180:  INCF   79,F
0181:  BTFSS  03.2
0182:  GOTO   18C
0183:  INCF   78,F
0184:  BTFSS  03.2
0185:  GOTO   18C
0186:  INCF   77,F
0187:  BTFSC  03.2
0188:  GOTO   196
0189:  RRF    78,F
018A:  RRF    79,F
018B:  RRF    7A,F
018C:  MOVF   27,W
018D:  MOVWF  32
018E:  MOVF   2B,W
018F:  XORWF  32,F
0190:  BTFSS  32.7
0191:  GOTO   194
0192:  BSF    78.7
0193:  GOTO   19A
0194:  BCF    78.7
0195:  GOTO   19A
0196:  CLRF   77
0197:  CLRF   78
0198:  CLRF   79
0199:  CLRF   7A
019A:  BCF    0A.3
019B:  BCF    0A.4
019C:  GOTO   351 (RETURN)
019D:  MOVLW  8E
019E:  MOVWF  77
019F:  MOVF   24,W
01A0:  SUBWF  77,F
01A1:  MOVF   25,W
01A2:  MOVWF  79
01A3:  MOVF   26,W
01A4:  MOVWF  78
01A5:  BSF    79.7
01A6:  MOVF   77,F
01A7:  BTFSC  03.2
01A8:  GOTO   1B4
01A9:  BCF    03.0
01AA:  MOVF   79,F
01AB:  BTFSS  03.2
01AC:  GOTO   1B0
01AD:  MOVF   78,F
01AE:  BTFSC  03.2
01AF:  GOTO   1B4
01B0:  RRF    79,F
01B1:  RRF    78,F
01B2:  DECFSZ 77,F
01B3:  GOTO   1A9
01B4:  BTFSS  25.7
01B5:  GOTO   1BB
01B6:  COMF   78,F
01B7:  COMF   79,F
01B8:  INCF   78,F
01B9:  BTFSC  03.2
01BA:  INCF   79,F
01BB:  BCF    0A.3
01BC:  BCF    0A.4
01BD:  GOTO   35A (RETURN)
*
0210:  MOVF   0B,W
0211:  MOVWF  28
0212:  BCF    0B.7
0213:  BSF    03.5
0214:  BSF    03.6
0215:  BSF    0C.7
0216:  BSF    0C.0
0217:  NOP
0218:  NOP
0219:  BCF    03.5
021A:  BCF    03.6
021B:  BTFSC  28.7
021C:  BSF    0B.7
021D:  BTFSC  03.0
021E:  GOTO   247
021F:  BSF    03.6
0220:  MOVF   0C,W
0221:  ANDLW  7F
0222:  BCF    03.6
0223:  MOVWF  28
0224:  BSF    03.6
0225:  MOVF   0D,W
0226:  BCF    03.6
0227:  MOVWF  29
0228:  BSF    03.6
0229:  MOVF   0F,W
022A:  BCF    03.6
022B:  MOVWF  2A
022C:  MOVF   28,W
022D:  MOVWF  2B
022E:  CALL   1E4
022F:  MOVF   29,W
0230:  BSF    03.6
0231:  MOVWF  0D
0232:  BCF    03.6
0233:  MOVF   2A,W
0234:  BSF    03.6
0235:  MOVWF  0F
0236:  BCF    03.6
0237:  MOVF   0B,W
0238:  MOVWF  2B
0239:  BCF    0B.7
023A:  BSF    03.5
023B:  BSF    03.6
023C:  BSF    0C.7
023D:  BSF    0C.0
023E:  NOP
023F:  NOP
0240:  BCF    03.5
0241:  BCF    03.6
0242:  BTFSC  2B.7
0243:  BSF    0B.7
0244:  DECFSZ 27,F
0245:  GOTO   247
0246:  GOTO   266
0247:  BSF    03.6
0248:  RLF    0C,W
0249:  RLF    0E,W
024A:  ANDLW  7F
024B:  BCF    03.6
024C:  MOVWF  28
024D:  BSF    03.6
024E:  MOVF   0D,W
024F:  BCF    03.6
0250:  MOVWF  29
0251:  BSF    03.6
0252:  MOVF   0F,W
0253:  BCF    03.6
0254:  MOVWF  2A
0255:  MOVF   28,W
0256:  MOVWF  2B
0257:  CALL   1E4
0258:  MOVF   29,W
0259:  BSF    03.6
025A:  MOVWF  0D
025B:  BCF    03.6
025C:  MOVF   2A,W
025D:  BSF    03.6
025E:  MOVWF  0F
025F:  INCF   0D,F
0260:  BTFSC  03.2
0261:  INCF   0F,F
0262:  BCF    03.0
0263:  BCF    03.6
0264:  DECFSZ 27,F
0265:  GOTO   210
0266:  RETURN
0267:  MOVF   2A,W
0268:  CLRF   78
0269:  SUBWF  29,W
026A:  BTFSC  03.0
026B:  GOTO   26F
026C:  MOVF   29,W
026D:  MOVWF  77
026E:  GOTO   27B
026F:  CLRF   77
0270:  MOVLW  08
0271:  MOVWF  2B
0272:  RLF    29,F
0273:  RLF    77,F
0274:  MOVF   2A,W
0275:  SUBWF  77,W
0276:  BTFSC  03.0
0277:  MOVWF  77
0278:  RLF    78,F
0279:  DECFSZ 2B,F
027A:  GOTO   272
027B:  RETURN
*
02B8:  MOVF   27,W
02B9:  MOVWF  29
02BA:  MOVLW  64
02BB:  MOVWF  2A
02BC:  CALL   267
02BD:  MOVF   77,W
02BE:  MOVWF  27
02BF:  MOVF   78,W
02C0:  MOVLW  30
02C1:  BTFSS  03.2
02C2:  GOTO   2CA
02C3:  BTFSS  28.1
02C4:  GOTO   2D1
02C5:  BTFSC  28.3
02C6:  GOTO   2D1
02C7:  BTFSC  28.4
02C8:  MOVLW  20
02C9:  GOTO   2CD
02CA:  BCF    28.3
02CB:  BCF    28.4
02CC:  BSF    28.0
02CD:  ADDWF  78,F
02CE:  MOVF   78,W
02CF:  MOVWF  2B
02D0:  CALL   1E4
02D1:  MOVF   27,W
02D2:  MOVWF  29
02D3:  MOVLW  0A
02D4:  MOVWF  2A
02D5:  CALL   267
02D6:  MOVF   77,W
02D7:  MOVWF  27
02D8:  MOVF   78,W
02D9:  MOVLW  30
02DA:  BTFSS  03.2
02DB:  GOTO   2E2
02DC:  BTFSC  28.3
02DD:  GOTO   2E6
02DE:  BTFSS  28.0
02DF:  GOTO   2E6
02E0:  BTFSC  28.4
02E1:  MOVLW  20
02E2:  ADDWF  78,F
02E3:  MOVF   78,W
02E4:  MOVWF  2B
02E5:  CALL   1E4
02E6:  MOVLW  30
02E7:  ADDWF  27,F
02E8:  MOVF   27,W
02E9:  MOVWF  2B
02EA:  CALL   1E4
....................  
.................... #list 
....................  
....................  
.................... #device ADC=10; 
....................  
.................... #use delay(clock = 4000000) 
*
000D:  MOVLW  2C
000E:  MOVWF  04
000F:  BCF    03.7
0010:  MOVF   00,W
0011:  BTFSC  03.2
0012:  GOTO   021
0013:  MOVLW  01
0014:  MOVWF  78
0015:  CLRF   77
0016:  DECFSZ 77,F
0017:  GOTO   016
0018:  DECFSZ 78,F
0019:  GOTO   015
001A:  MOVLW  4A
001B:  MOVWF  77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  GOTO   01F
001F:  DECFSZ 00,F
0020:  GOTO   013
0021:  RETURN
*
01BE:  MOVLW  12
01BF:  SUBWF  2A,F
01C0:  BTFSS  03.0
01C1:  GOTO   1D1
01C2:  MOVLW  2A
01C3:  MOVWF  04
01C4:  BCF    03.7
01C5:  MOVLW  FC
01C6:  ANDWF  00,F
01C7:  BCF    03.0
01C8:  RRF    00,F
01C9:  RRF    00,F
01CA:  MOVF   00,W
01CB:  BTFSC  03.2
01CC:  GOTO   1D1
01CD:  GOTO   1CF
01CE:  NOP
01CF:  DECFSZ 00,F
01D0:  GOTO   1CE
01D1:  RETURN
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(d) 
....................  
.................... #define use_portb_lcd TRUE 
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003A:  MOVLW  0F
003B:  BSF    03.5
003C:  ANDWF  06,W
003D:  IORLW  F0
003E:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
003F:  BCF    03.5
0040:  BSF    06.2
....................    delay_cycles(1); 
0041:  NOP
....................    lcd_output_enable(1); 
0042:  BSF    06.0
....................    delay_cycles(1); 
0043:  NOP
....................    high = lcd_read_nibble(); 
0044:  CALL   02E
0045:  MOVF   78,W
0046:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
0047:  BCF    06.0
....................    delay_cycles(1); 
0048:  NOP
....................    lcd_output_enable(1); 
0049:  BSF    06.0
....................    delay_us(1); 
004A:  NOP
....................    low = lcd_read_nibble(); 
004B:  CALL   02E
004C:  MOVF   78,W
004D:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
004E:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
004F:  MOVLW  0F
0050:  BSF    03.5
0051:  ANDWF  06,W
0052:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0053:  BCF    03.5
0054:  SWAPF  33,W
0055:  MOVWF  77
0056:  MOVLW  F0
0057:  ANDWF  77,F
0058:  MOVF   77,W
0059:  IORWF  32,W
005A:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002E:  MOVF   06,W
002F:  MOVWF  77
0030:  SWAPF  06,W
0031:  ANDLW  0F
0032:  MOVWF  78
....................   #endif 
0033:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0022:  SWAPF  33,W
0023:  ANDLW  F0
0024:  MOVWF  77
0025:  MOVLW  0F
0026:  ANDWF  06,W
0027:  IORWF  77,W
0028:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0029:  NOP
....................    lcd_output_enable(1); 
002A:  BSF    06.0
....................    delay_us(2); 
002B:  GOTO   02C
....................    lcd_output_enable(0); 
002C:  BCF    06.0
002D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0034:  BSF    03.5
0035:  BCF    06.0
....................    lcd_rs_tris(); 
0036:  BCF    06.1
....................    lcd_rw_tris(); 
0037:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0038:  BCF    03.5
0039:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005B:  MOVF   78,W
005C:  MOVWF  32
005D:  BTFSC  32.7
005E:  GOTO   03A
....................    lcd_output_rs(address); 
005F:  BTFSS  30.0
0060:  BCF    06.1
0061:  BTFSC  30.0
0062:  BSF    06.1
....................    delay_cycles(1); 
0063:  NOP
....................    lcd_output_rw(0); 
0064:  BCF    06.2
....................    delay_cycles(1); 
0065:  NOP
....................    lcd_output_enable(0); 
0066:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0067:  SWAPF  31,W
0068:  MOVWF  32
0069:  MOVLW  0F
006A:  ANDWF  32,F
006B:  MOVF   32,W
006C:  MOVWF  33
006D:  CALL   022
....................    lcd_send_nibble(n & 0xf); 
006E:  MOVF   31,W
006F:  ANDLW  0F
0070:  MOVWF  32
0071:  MOVWF  33
0072:  CALL   022
0073:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0074:  MOVLW  28
0075:  MOVWF  25
0076:  MOVLW  0C
0077:  MOVWF  26
0078:  MOVLW  01
0079:  MOVWF  27
007A:  MOVLW  06
007B:  MOVWF  28
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
007C:  BCF    06.0
....................    lcd_output_rs(0); 
007D:  BCF    06.1
....................    lcd_output_rw(0); 
007E:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007F:  MOVLW  0F
0080:  BSF    03.5
0081:  ANDWF  06,W
0082:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0083:  BCF    06.0
....................    lcd_rs_tris(); 
0084:  BCF    06.1
....................    lcd_rw_tris(); 
0085:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0086:  MOVLW  0F
0087:  BCF    03.5
0088:  MOVWF  2C
0089:  CALL   00D
....................    for(i=1;i<=3;++i) 
008A:  MOVLW  01
008B:  MOVWF  24
008C:  MOVF   24,W
008D:  SUBLW  03
008E:  BTFSS  03.0
008F:  GOTO   098
....................    { 
....................        lcd_send_nibble(3); 
0090:  MOVLW  03
0091:  MOVWF  33
0092:  CALL   022
....................        delay_ms(5); 
0093:  MOVLW  05
0094:  MOVWF  2C
0095:  CALL   00D
0096:  INCF   24,F
0097:  GOTO   08C
....................    } 
....................     
....................    lcd_send_nibble(2); 
0098:  MOVLW  02
0099:  MOVWF  33
009A:  CALL   022
....................    delay_ms(5); 
009B:  MOVLW  05
009C:  MOVWF  2C
009D:  CALL   00D
....................    for(i=0;i<=3;++i) 
009E:  CLRF   24
009F:  MOVF   24,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AF
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A3:  MOVLW  25
00A4:  ADDWF  24,W
00A5:  MOVWF  04
00A6:  BCF    03.7
00A7:  MOVF   00,W
00A8:  MOVWF  29
00A9:  CLRF   30
00AA:  MOVF   29,W
00AB:  MOVWF  31
00AC:  CALL   034
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00AD:  INCF   24,F
00AE:  GOTO   09F
00AF:  BCF    0A.3
00B0:  BCF    0A.4
00B1:  GOTO   32E (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
01D2:  DECFSZ 2D,W
01D3:  GOTO   1D5
01D4:  GOTO   1D8
....................       address=LCD_LINE_TWO; 
01D5:  MOVLW  40
01D6:  MOVWF  2E
01D7:  GOTO   1D9
....................    else 
....................       address=0; 
01D8:  CLRF   2E
....................       
....................    address+=x-1; 
01D9:  MOVLW  01
01DA:  SUBWF  2C,W
01DB:  ADDWF  2E,F
....................    lcd_send_byte(0,0x80|address); 
01DC:  MOVF   2E,W
01DD:  IORLW  80
01DE:  MOVWF  2F
01DF:  CLRF   30
01E0:  MOVF   2F,W
01E1:  MOVWF  31
01E2:  CALL   034
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01E3:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01E4:  MOVF   2B,W
01E5:  XORLW  07
01E6:  BTFSC  03.2
01E7:  GOTO   1F2
01E8:  XORLW  0B
01E9:  BTFSC  03.2
01EA:  GOTO   1F7
01EB:  XORLW  06
01EC:  BTFSC  03.2
01ED:  GOTO   1FF
01EE:  XORLW  02
01EF:  BTFSC  03.2
01F0:  GOTO   205
01F1:  GOTO   20A
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01F2:  MOVLW  01
01F3:  MOVWF  2C
01F4:  MOVWF  2D
01F5:  CALL   1D2
01F6:  GOTO   20F
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01F7:  CLRF   30
01F8:  MOVLW  01
01F9:  MOVWF  31
01FA:  CALL   034
....................                      delay_ms(2); 
01FB:  MOVLW  02
01FC:  MOVWF  2C
01FD:  CALL   00D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01FE:  GOTO   20F
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01FF:  MOVLW  01
0200:  MOVWF  2C
0201:  MOVLW  02
0202:  MOVWF  2D
0203:  CALL   1D2
0204:  GOTO   20F
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0205:  CLRF   30
0206:  MOVLW  10
0207:  MOVWF  31
0208:  CALL   034
0209:  GOTO   20F
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
020A:  MOVLW  01
020B:  MOVWF  30
020C:  MOVF   2B,W
020D:  MOVWF  31
020E:  CALL   034
....................      #endif 
....................    } 
020F:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned long int i=0, aci=0; 
....................  
.................... void servo(unsigned long int b,c){ 
....................  
.................... output_high(pin_d7); 
*
027C:  BSF    08.7
.................... delay_us(550+b); // PWM dolu kýsým 
027D:  MOVLW  26
027E:  ADDWF  24,W
027F:  MOVWF  27
0280:  MOVF   25,W
0281:  MOVWF  28
0282:  MOVLW  02
0283:  BTFSC  03.0
0284:  MOVLW  03
0285:  ADDWF  28,F
0286:  MOVF   28,W
0287:  MOVWF  29
0288:  INCF   29,F
0289:  DECF   29,F
028A:  BTFSC  03.2
028B:  GOTO   290
028C:  MOVLW  FF
028D:  MOVWF  2A
028E:  CALL   1BE
028F:  GOTO   289
0290:  MOVF   27,W
0291:  MOVWF  2A
0292:  CALL   1BE
.................... output_low(pin_d7); 
0293:  BCF    08.7
.................... delay_us(19450-b); // PWM dolu kýsmý 20ms tamamlayacak kýsým 
0294:  MOVF   24,W
0295:  SUBLW  FA
0296:  MOVWF  27
0297:  MOVLW  4B
0298:  MOVWF  28
0299:  MOVF   25,W
029A:  BTFSS  03.0
029B:  INCFSZ 25,W
029C:  SUBWF  28,F
029D:  MOVF   28,W
029E:  MOVWF  29
029F:  INCF   29,F
02A0:  DECF   29,F
02A1:  BTFSC  03.2
02A2:  GOTO   2A7
02A3:  MOVLW  FF
02A4:  MOVWF  2A
02A5:  CALL   1BE
02A6:  GOTO   2A0
02A7:  MOVF   27,W
02A8:  MOVWF  2A
02A9:  CALL   1BE
.................... printf(lcd_putc,"\fAci = %u Derece",c); 
02AA:  MOVLW  04
02AB:  BSF    03.6
02AC:  MOVWF  0D
02AD:  MOVLW  00
02AE:  MOVWF  0F
02AF:  BCF    03.0
02B0:  MOVLW  07
02B1:  BCF    03.6
02B2:  MOVWF  27
02B3:  CALL   210
02B4:  MOVF   26,W
02B5:  MOVWF  27
02B6:  MOVLW  1B
02B7:  MOVWF  28
*
02EB:  MOVLW  08
02EC:  BSF    03.6
02ED:  MOVWF  0D
02EE:  MOVLW  00
02EF:  MOVWF  0F
02F0:  BSF    03.0
02F1:  MOVLW  07
02F2:  BCF    03.6
02F3:  MOVWF  27
02F4:  CALL   210
.................... continue; 
02F5:  BCF    0A.3
02F6:  BCF    0A.4
02F7:  GOTO   368 (RETURN)
....................  
.................... } 
....................  
.................... void main(){ 
02F8:  MOVF   03,W
02F9:  ANDLW  1F
02FA:  MOVWF  03
02FB:  CLRF   21
02FC:  CLRF   20
02FD:  CLRF   23
02FE:  CLRF   22
02FF:  BSF    03.5
0300:  BSF    1F.0
0301:  BSF    1F.1
0302:  BSF    1F.2
0303:  BCF    1F.3
0304:  BCF    03.7
.................... setup_psp(PSP_DISABLED); 
0305:  BCF    09.4
.................... setup_timer_1(T1_DISABLED); 
0306:  BCF    03.5
0307:  CLRF   10
.................... setup_timer_2(T2_DISABLED,0,1); 
0308:  MOVLW  00
0309:  MOVWF  78
030A:  MOVWF  12
030B:  MOVLW  00
030C:  BSF    03.5
030D:  MOVWF  12
.................... setup_ccp1(CCP_OFF); 
030E:  MOVLW  F0
030F:  BCF    03.5
0310:  ANDWF  17,F
.................... setup_ccp2(CCP_OFF); 
0311:  ANDWF  1D,F
....................  
.................... setup_adc_ports(ALL_ANALOG); 
0312:  BSF    03.5
0313:  BCF    1F.0
0314:  BCF    1F.1
0315:  BCF    1F.2
0316:  BCF    1F.3
.................... setup_adc(adc_clock_div_32); 
0317:  BCF    03.5
0318:  BCF    1F.6
0319:  BSF    1F.7
031A:  BSF    03.5
031B:  BSF    1F.7
031C:  BCF    03.5
031D:  BSF    1F.0
.................... set_adc_channel(0); 
031E:  MOVLW  00
031F:  MOVWF  78
0320:  MOVF   1F,W
0321:  ANDLW  C7
0322:  IORWF  78,W
0323:  MOVWF  1F
....................  
.................... set_tris_a(0x01); 
0324:  MOVLW  01
0325:  BSF    03.5
0326:  MOVWF  05
.................... set_tris_d(0x00); 
0327:  MOVLW  00
0328:  MOVWF  08
.................... set_tris_b(0x00); 
0329:  MOVWF  06
....................  
.................... output_b(0x00); 
032A:  BCF    03.5
032B:  CLRF   06
.................... output_d(0x00); 
032C:  CLRF   08
....................  
.................... lcd_init(); 
032D:  GOTO   074
....................  
.................... while(true){ 
....................  
.................... i = read_adc(); 
032E:  BSF    1F.2
032F:  BTFSC  1F.2
0330:  GOTO   32F
0331:  BSF    03.5
0332:  MOVF   1E,W
0333:  BCF    03.5
0334:  MOVWF  20
0335:  MOVF   1E,W
0336:  MOVWF  21
.................... aci = i*2/11.1; 
0337:  BCF    03.0
0338:  RLF    20,W
0339:  MOVWF  24
033A:  RLF    21,W
033B:  MOVWF  25
033C:  MOVWF  27
033D:  MOVF   24,W
033E:  MOVWF  26
033F:  GOTO   0B2
0340:  MOVF   7A,W
0341:  MOVWF  29
0342:  MOVF   79,W
0343:  MOVWF  28
0344:  MOVF   78,W
0345:  MOVWF  27
0346:  MOVF   77,W
0347:  MOVWF  26
0348:  MOVLW  9A
0349:  MOVWF  2D
034A:  MOVLW  99
034B:  MOVWF  2C
034C:  MOVLW  31
034D:  MOVWF  2B
034E:  MOVLW  82
034F:  MOVWF  2A
0350:  GOTO   0D1
0351:  MOVF   7A,W
0352:  MOVWF  27
0353:  MOVF   79,W
0354:  MOVWF  26
0355:  MOVF   78,W
0356:  MOVWF  25
0357:  MOVF   77,W
0358:  MOVWF  24
0359:  GOTO   19D
035A:  MOVF   79,W
035B:  MOVWF  23
035C:  MOVF   78,W
035D:  MOVWF  22
.................... i=i*2; 
035E:  BCF    03.0
035F:  RLF    20,F
0360:  RLF    21,F
.................... servo(i,aci); 
0361:  MOVF   21,W
0362:  MOVWF  25
0363:  MOVF   20,W
0364:  MOVWF  24
0365:  MOVF   22,W
0366:  MOVWF  26
0367:  GOTO   27C
0368:  GOTO   32E
....................  
.................... } 
....................  
.................... } 
....................  
0369:  SLEEP
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3B73   RC NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
